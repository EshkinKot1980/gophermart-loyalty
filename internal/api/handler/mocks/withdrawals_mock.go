// Code generated by MockGen. DO NOT EDIT.
// Source: withdrawals.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/EshkinKot1980/gophermart-loyalty/internal/api/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockWithdrawalsService is a mock of WithdrawalsService interface.
type MockWithdrawalsService struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalsServiceMockRecorder
}

// MockWithdrawalsServiceMockRecorder is the mock recorder for MockWithdrawalsService.
type MockWithdrawalsServiceMockRecorder struct {
	mock *MockWithdrawalsService
}

// NewMockWithdrawalsService creates a new mock instance.
func NewMockWithdrawalsService(ctrl *gomock.Controller) *MockWithdrawalsService {
	mock := &MockWithdrawalsService{ctrl: ctrl}
	mock.recorder = &MockWithdrawalsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalsService) EXPECT() *MockWithdrawalsServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockWithdrawalsService) List(ctx context.Context) ([]dto.WithdrawalsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]dto.WithdrawalsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWithdrawalsServiceMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWithdrawalsService)(nil).List), ctx)
}

// Withdraw mocks base method.
func (m *MockWithdrawalsService) Withdraw(ctx context.Context, w dto.Withdrawals) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWithdrawalsServiceMockRecorder) Withdraw(ctx, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWithdrawalsService)(nil).Withdraw), ctx, w)
}
