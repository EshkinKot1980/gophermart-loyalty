// Code generated by MockGen. DO NOT EDIT.
// Source: processing.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/EshkinKot1980/gophermart-loyalty/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockProcessingRepository is a mock of ProcessingRepository interface.
type MockProcessingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingRepositoryMockRecorder
}

// MockProcessingRepositoryMockRecorder is the mock recorder for MockProcessingRepository.
type MockProcessingRepositoryMockRecorder struct {
	mock *MockProcessingRepository
}

// NewMockProcessingRepository creates a new mock instance.
func NewMockProcessingRepository(ctrl *gomock.Controller) *MockProcessingRepository {
	mock := &MockProcessingRepository{ctrl: ctrl}
	mock.recorder = &MockProcessingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessingRepository) EXPECT() *MockProcessingRepositoryMockRecorder {
	return m.recorder
}

// MarkOrderForRetryOrInvalid mocks base method.
func (m *MockProcessingRepository) MarkOrderForRetryOrInvalid(ctx context.Context, number, toStatus, ivalidStatus string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkOrderForRetryOrInvalid", ctx, number, toStatus, ivalidStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkOrderForRetryOrInvalid indicates an expected call of MarkOrderForRetryOrInvalid.
func (mr *MockProcessingRepositoryMockRecorder) MarkOrderForRetryOrInvalid(ctx, number, toStatus, ivalidStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOrderForRetryOrInvalid", reflect.TypeOf((*MockProcessingRepository)(nil).MarkOrderForRetryOrInvalid), ctx, number, toStatus, ivalidStatus)
}

// OrderNubmersForProcess mocks base method.
func (m *MockProcessingRepository) OrderNubmersForProcess(ctx context.Context, statuses []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderNubmersForProcess", ctx, statuses)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderNubmersForProcess indicates an expected call of OrderNubmersForProcess.
func (mr *MockProcessingRepositoryMockRecorder) OrderNubmersForProcess(ctx, statuses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderNubmersForProcess", reflect.TypeOf((*MockProcessingRepository)(nil).OrderNubmersForProcess), ctx, statuses)
}

// ProcessOrder mocks base method.
func (m *MockProcessingRepository) ProcessOrder(ctx context.Context, order entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessOrder indicates an expected call of ProcessOrder.
func (mr *MockProcessingRepositoryMockRecorder) ProcessOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrder", reflect.TypeOf((*MockProcessingRepository)(nil).ProcessOrder), ctx, order)
}
