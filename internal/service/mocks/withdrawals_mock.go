// Code generated by MockGen. DO NOT EDIT.
// Source: withdrawals.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/EshkinKot1980/gophermart-loyalty/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockWithdrawalsRepository is a mock of WithdrawalsRepository interface.
type MockWithdrawalsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalsRepositoryMockRecorder
}

// MockWithdrawalsRepositoryMockRecorder is the mock recorder for MockWithdrawalsRepository.
type MockWithdrawalsRepositoryMockRecorder struct {
	mock *MockWithdrawalsRepository
}

// NewMockWithdrawalsRepository creates a new mock instance.
func NewMockWithdrawalsRepository(ctrl *gomock.Controller) *MockWithdrawalsRepository {
	mock := &MockWithdrawalsRepository{ctrl: ctrl}
	mock.recorder = &MockWithdrawalsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalsRepository) EXPECT() *MockWithdrawalsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWithdrawalsRepository) Create(ctx context.Context, widrawals entity.Withdrawals) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, widrawals)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWithdrawalsRepositoryMockRecorder) Create(ctx, widrawals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWithdrawalsRepository)(nil).Create), ctx, widrawals)
}

// GetAllByUser mocks base method.
func (m *MockWithdrawalsRepository) GetAllByUser(ctx context.Context, userID uint64) ([]entity.Withdrawals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUser", ctx, userID)
	ret0, _ := ret[0].([]entity.Withdrawals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUser indicates an expected call of GetAllByUser.
func (mr *MockWithdrawalsRepositoryMockRecorder) GetAllByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUser", reflect.TypeOf((*MockWithdrawalsRepository)(nil).GetAllByUser), ctx, userID)
}
