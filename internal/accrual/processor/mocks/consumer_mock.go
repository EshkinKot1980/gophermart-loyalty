// Code generated by MockGen. DO NOT EDIT.
// Source: consumer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/EshkinKot1980/gophermart-loyalty/internal/accrual/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockProcessingService is a mock of ProcessingService interface.
type MockProcessingService struct {
	ctrl     *gomock.Controller
	recorder *MockProcessingServiceMockRecorder
}

// MockProcessingServiceMockRecorder is the mock recorder for MockProcessingService.
type MockProcessingServiceMockRecorder struct {
	mock *MockProcessingService
}

// NewMockProcessingService creates a new mock instance.
func NewMockProcessingService(ctrl *gomock.Controller) *MockProcessingService {
	mock := &MockProcessingService{ctrl: ctrl}
	mock.recorder = &MockProcessingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessingService) EXPECT() *MockProcessingServiceMockRecorder {
	return m.recorder
}

// MarkOrderForRetry mocks base method.
func (m *MockProcessingService) MarkOrderForRetry(ctx context.Context, number string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkOrderForRetry", ctx, number)
}

// MarkOrderForRetry indicates an expected call of MarkOrderForRetry.
func (mr *MockProcessingServiceMockRecorder) MarkOrderForRetry(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOrderForRetry", reflect.TypeOf((*MockProcessingService)(nil).MarkOrderForRetry), ctx, number)
}

// ProsessOrder mocks base method.
func (m *MockProcessingService) ProsessOrder(ctx context.Context, order dto.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProsessOrder", ctx, order)
}

// ProsessOrder indicates an expected call of ProsessOrder.
func (mr *MockProcessingServiceMockRecorder) ProsessOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProsessOrder", reflect.TypeOf((*MockProcessingService)(nil).ProsessOrder), ctx, order)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockLogger) Error(message string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", message, err)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(message, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), message, err)
}

// Warn mocks base method.
func (m *MockLogger) Warn(message string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", message, err)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(message, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), message, err)
}
